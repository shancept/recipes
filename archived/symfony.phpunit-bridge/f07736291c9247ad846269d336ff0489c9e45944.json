{
    "manifests": {
        "symfony/phpunit-bridge": {
            "manifest": {
                "copy-from-recipe": {
                    ".env.test": ".env.test",
                    "bin/": "%BIN_DIR%/",
                    "phpunit.xml.dist": "phpunit.xml.dist",
                    "tests/": "tests/"
                },
                "gitignore": [
                    ".phpunit",
                    ".phpunit.result.cache",
                    "/phpunit.xml"
                ],
                "post-install-output": [
                    "<bg=blue;fg=white>              </>",
                    "<bg=blue;fg=white> How to test? </>",
                    "<bg=blue;fg=white>              </>",
                    "",
                    "  * <fg=blue>Write</> test cases in the <comment>tests/</> folder",
                    "  * Use MakerBundle's <comment>make:test</> command as a shortcut!",
                    "  * <fg=blue>Run</> the tests with <comment>php bin/phpunit</>"
                ]
            },
            "files": {
                ".env.test": {
                    "contents": [
                        "# define your env variables for the test env here",
                        "KERNEL_CLASS='App\\Kernel'",
                        "APP_SECRET='$ecretf0rt3st'",
                        "SYMFONY_DEPRECATIONS_HELPER=999999",
                        "PANTHER_APP_ENV=panther",
                        "PANTHER_ERROR_SCREENSHOT_DIR=./var/error-screenshots",
                        ""
                    ],
                    "executable": false
                },
                "bin/phpunit": {
                    "contents": [
                        "#!/usr/bin/env php",
                        "<?php",
                        "if (file_exists(dirname(__DIR__).'/vendor/phpunit/phpunit/phpunit')) {",
                        "    require(dirname(__DIR__).'/vendor/phpunit/phpunit/phpunit');",
                        "} else {",
                        "    if (!file_exists(dirname(__DIR__).'/vendor/symfony/phpunit-bridge/bin/simple-phpunit.php')) {",
                        "        echo \"Unable to find the `simple-phpunit.php` script in `vendor/symfony/phpunit-bridge/bin/`.\\n\";",
                        "        exit(1);",
                        "    }",
                        "",
                        "    if (false === getenv('SYMFONY_PHPUNIT_DIR')) {",
                        "        putenv('SYMFONY_PHPUNIT_DIR='.__DIR__.'/.phpunit');",
                        "    }",
                        "",
                        "    require dirname(__DIR__).'/vendor/symfony/phpunit-bridge/bin/simple-phpunit.php';",
                        "}",
                        ""
                    ],
                    "executable": true
                },
                "phpunit.xml.dist": {
                    "contents": [
                        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                        "",
                        "<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->",
                        "<!-- If you use phpunit-bridge directly, set -->",
                        "<!-- xsi:noNamespaceSchemaLocation=\"bin/.phpunit/phpunit.xsd\" -->",
                        "<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                        "         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"",
                        "         backupGlobals=\"false\"",
                        "         colors=\"true\"",
                        "         bootstrap=\"tests/bootstrap.php\"",
                        ">",
                        "    <php>",
                        "        <ini name=\"error_reporting\" value=\"-1\" />",
                        "        <server name=\"APP_ENV\" value=\"test\" force=\"true\" />",
                        "        <server name=\"SHELL_VERBOSITY\" value=\"-1\" />",
                        "        <!-- If you use phpunit-bridge directly, you can control extra behavior -->",
                        "        <!--",
                        "        <server name=\"SYMFONY_PHPUNIT_REMOVE\" value=\"\" />",
                        "        <server name=\"SYMFONY_PHPUNIT_VERSION\" value=\"8.5\" />",
                        "        -->",
                        "    </php>",
                        "",
                        "    <testsuites>",
                        "        <testsuite name=\"Project Test Suite\">",
                        "            <directory>tests</directory>",
                        "        </testsuite>",
                        "    </testsuites>",
                        "",
                        "    <filter>",
                        "        <whitelist processUncoveredFilesFromWhitelist=\"true\">",
                        "            <directory suffix=\".php\">src</directory>",
                        "        </whitelist>",
                        "    </filter>",
                        "",
                        "    <listeners>",
                        "        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />",
                        "    </listeners>",
                        "",
                        "    <!-- Run `composer require symfony/panther` before enabling this extension -->",
                        "    <!--",
                        "    <extensions>",
                        "        <extension class=\"Symfony\\Component\\Panther\\ServerExtension\" />",
                        "    </extensions>",
                        "    -->",
                        "</phpunit>",
                        ""
                    ],
                    "executable": false
                },
                "tests/bootstrap.php": {
                    "contents": [
                        "<?php",
                        "",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "require dirname(__DIR__).'/vendor/autoload.php';",
                        "",
                        "if (file_exists(dirname(__DIR__).'/config/bootstrap.php')) {",
                        "    require dirname(__DIR__).'/config/bootstrap.php';",
                        "} elseif (method_exists(Dotenv::class, 'bootEnv')) {",
                        "    (new Dotenv())->bootEnv(dirname(__DIR__).'/.env');",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "f07736291c9247ad846269d336ff0489c9e45944"
        }
    }
}
